# -*- coding: utf-8 -*-
"""Chapter12_SequentialModels-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZSBpmrSGv8Uq42MuxTolPJOg4VpI2s6a
"""

# LSTM training from scratch
import torch
import numpy as np
import torch.nn as nn
import transformers
from huggingface_hub import notebook_login
import matplotlib.pyplot as plt

data = """Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, ‘and what is the use of a book,’ thought Alice ‘without pictures or conversation?' So she was considering in her own mind (as well as she could, for the hot day made her feel very sleepy and stupid), whether the pleasure of making a daisy-chain would be worth the trouble of getting up and picking the daisies, when suddenly a White Rabbit with pink eyes ran close by her. There was nothing so very remarkable in that; nor did Alice think it so very much out of the way to hear the Rabbit say to itself, ‘Oh dear! Oh dear! I shall be late!’ (when she thought it over afterwards, it occurred to her that she ought to have wondered at this, but at the time it all seemed quite natural); but when the Rabbit actually took a watch out of its waistcoat-pocket, and looked at it, and then hurried on, Alice started to her feet, for it flashed across her mind that she had never before seen a rabbit with either a waistcoat-pocket, or a watch to take out of it, and burning with curiosity, she ran across the field after it, and fortunately was just in time to see it pop down a large rabbit-hole under the hedge.
"""

from huggingface_hub import notebook_login
notebook_login()

from transformers import AutoModel, AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained('google-bert/bert-base-uncased')
emb_model = AutoModel.from_pretrained('google-bert/bert-base-uncased')

tokens = tokenizer.tokenize(data)
token_ids = tokenizer.convert_tokens_to_ids(tokens)

len(tokens) # vocab size

# convert to embeddings
token_ids = torch.tensor(token_ids).unsqueeze(dim=0)

token_ids.shape

input_embeddings = emb_model(token_ids)

input_embeddings.last_hidden_state

input_embeddings = input_embeddings.last_hidden_state.detach()

input_embeddings.requires_grad

# build the lstm cell
class LSTM(nn.Module):
  def __init__(self, input_dim, hidden_dim, output_dim):
    super().__init__()
    self.input_dim = input_dim
    self.hidden_dim = hidden_dim
    self.output_dim = output_dim

    self.forget = nn.Linear(input_dim + hidden_dim, hidden_dim)
    self.input = nn.Linear(input_dim + hidden_dim, hidden_dim)
    self.out_gate = nn.Linear(input_dim + hidden_dim, hidden_dim)
    self.cell = nn.Linear(input_dim + hidden_dim, hidden_dim)

    self.sigmoid = nn.Sigmoid()
    self.tanh = nn.Tanh()

    self.out = nn.Linear(hidden_dim, output_dim)
    self.softmax = nn.Softmax(dim=1)

  def forward(self, x, hidden_state, cell_state):
    input_prev_h = torch.cat((x, hidden_state), dim=1)

    forget = self.forget(input_prev_h)
    forget = self.sigmoid(forget)

    input_gate = self.input(input_prev_h)
    input_gate = self.sigmoid(input_gate)

    out_gate = self.out_gate(input_prev_h)
    out_gate = self.sigmoid(out_gate)

    cell_state_t = self.cell(input_prev_h)
    cell_state_t = self.tanh(cell_state_t)

    cell_state = (cell_state_t * input_gate) + (cell_state * forget)
    hidden_state = self.tanh(cell_state) * out_gate

    out = self.out(hidden_state)
    out_probs = self.softmax(out)

    return out_probs, hidden_state, cell_state

ce_loss = nn.CrossEntropyLoss()

def fit_lstm_model(vocab_size, hidden_dim=256, input_emb_dim = 768, epochs = 10, lr = 1e-3, eps = 1e-8):

  lstm_model = LSTM(input_emb_dim, hidden_dim, vocab_size)
  optimizer = torch.optim.Adam(lstm_model.parameters(), lr=lr, eps=eps)

  for epoch in range(1, epochs):
    optimizer.zero_grad()

    # randomly mask the input embeddings
    output_idx = np.random.randint(0, vocab_size)
    input_embed = input_embeddings.clone()
    input_embed[:, output_idx] = torch.randn(1, input_emb_dim)

    hidden_state = torch.zeros(1, hidden_dim) # zero down the states per each text sequence or sentence
    cell_state = torch.zeros(1, hidden_dim)

    for tensor in input_embed[0]:
      # teacher forced training
      output, hidden_state, cell_state = lstm_model(tensor.unsqueeze(dim=0), hidden_state.detach(), cell_state.detach())

    # After applying forward of the sequences

    loss = ce_loss(output, torch.tensor(output_idx).unsqueeze(0))

    loss.backward()
    optimizer.step()

    if epoch % 1 == 0:
      print(f"Epoch: {epoch}, Loss: {loss.item()}, Masked Token = {tokens[output_idx]} Output Token: {tokens[torch.argmax(output)]}")

  return output, loss.item()

fit_lstm_model(len(tokens), epochs = 100)